/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    `java-library`
    antlr
    id("edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin") version "2025.0"
}

version = "0.1.1"
group = "com.team3316"

repositories {
    mavenCentral()

    maven {
        url = uri("https://maven.ctr-electronics.com/release/")
    }
}
wpilibRepositories.addAllReleaseRepositories(project)

dependencies {
    val wpilibVersion = "2025.3.2"

    api("org.apache.commons", "commons-numbers-fraction", "1.2")
    implementation("org.apache.commons", "commons-lang3", "3.18.0")
    implementation("commons-io", "commons-io", "2.20.0")
    compileOnly("org.jetbrains", "annotations", "26.0.2")
    antlr("org.antlr", "antlr4", "4.13.2")

    implementation("edu.wpi.first.wpilibj", "wpilibj-java", wpilibVersion)
    api("edu.wpi.first.wpilibNewCommands", "wpilibNewCommands-java", wpilibVersion)
    implementation("edu.wpi.first.wpiutil", "wpiutil-java", wpilibVersion)
    // implementation("edu.wpi.first.wpimath", "wpimath-java", wpilibVersion)
    api("edu.wpi.first.wpiunits", "wpiunits-java", wpilibVersion)
    implementation("com.ctre.phoenix6", "wpiapi-java", "25.4.0")

	testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
    withJavadocJar()
}

tasks.generateGrammarSource {
    arguments = arguments + listOf("-visitor", "-no-listener")
}

tasks.named("sourcesJar") {
    dependsOn(tasks.generateGrammarSource)
}

tasks.named<Test>("test") {
    useJUnitPlatform()

    testLogging {
        events("skipped", "passed", "failed")
    }
}

tasks.register<Exec>("jshell") {
    dependsOn(tasks.classes)
    val paths = sourceSets["main"].runtimeClasspath + sourceSets["test"].runtimeClasspath
    val path = paths.filter { it.exists() }.map { it.toString() }.joinToString(separator = System.getProperty("path.separator"))
    logger.info(":jshell executing with --class-path {}", path)
    val shellArgs = listOf("-a", "jshell", "--class-path", path, "--startup", "DEFAULT", "--startup", "PRINTING")
    standardInput = System.`in`
    executable("rlwrap")
    args(shellArgs)
}

tasks.register<JavaExec>("dsl") {
    classpath = sourceSets["main"].runtimeClasspath
    mainClass = "com.team3316.orchestra.dsl.Main"
    standardInput = System.`in`
}
